<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A little bit more..</title><link>http://cha-messy.github.io/</link><description></description><atom:link href="http://cha-messy.github.io/feeds/coory.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 21 Oct 2014 00:00:00 +0800</lastBuildDate><item><title>python的常见错误</title><link>http://cha-messy.github.io/pythonde-chang-jian-cuo-wu.html</link><description>&lt;h2&gt;默认参数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;函数对象只会产生一次,所以默认参数的赋值都只有一次，而不是每次调用都会产生一个新的函数对象，从而重新赋值默认参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# 也许认为返回的是只有一长度的list&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# 传入参数时正常工作&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;A little bit more..&lt;/h3&gt;
&lt;p&gt;处理方法每个参数去判断是否为None再来初始化,参数多了那就是一大坨,但是有效,有没有更好呢？&lt;/p&gt;
&lt;h2&gt;动态属性&amp;amp;&amp;amp;类方法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有特殊设置保护父类的属性防止修改，那么在没有自己申明这个属性的子类中就会因为不知何处发生的父类属性的修改而被影响到.因为子类访问自己未声明的属性的时候只是很简单的递归的往父类的上方查询,查到就调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Son&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Daughter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Daughter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Daughter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Son&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Daughter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;怎么预防？属性变量不允许动态改变？生成实例之后是不受这个影响的？问题的关键还是实例化之后是否自己改变？还有一个标准是有没有&lt;code&gt;__init__&lt;/code&gt;方法&lt;/p&gt;
&lt;p&gt;@todo&lt;/p&gt;
&lt;h2&gt;作用域解析,legb规则&lt;/h2&gt;
&lt;p&gt;Local -&amp;gt; Enclosing -&amp;gt; Global -&amp;gt; Built-in&lt;/p&gt;
&lt;p&gt;文章中的解释是:在一个作用域里面给一个变量赋值的时候，Python自动认为这个变量是这个作用域的本地变量，并屏蔽作用域外的同名的变量。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="c"&gt;#foo()&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# works just fine&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;foo1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;@todo&lt;/p&gt;
&lt;p&gt;赋值？ 只是变量名指向了同一个对象？不是指针(函数传递证明)，也不代表对象本身，(赋值的这个操作肯定有引用计数的加减,但是具体究竟是怎么个实现呢？)&lt;/p&gt;
&lt;h2&gt;闭包中绑定变量&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_multipliers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;create_multipliers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# expect: 0 2 4 6 8&lt;/span&gt;
&lt;span class="c"&gt;# fact: 8 8 8 8 8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;文章中的解释这是由于Python的后期绑定（late binding）机制导致的，这是指在闭包中使用的变量的值，是在内层函数被调用的时候查找的。因此在上面的代码中，当任一返回函数被调用的时候，i的值是在它被调用时的周围作用域中查找（到那时，循环已经结束了，所以i已经被赋予了它最终的值4）。&lt;/p&gt;
&lt;p&gt;给出的解决方法:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_multipliers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;create_multipliers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;A little bit more&lt;/h3&gt;
&lt;p&gt;@todo&lt;/p&gt;
&lt;p&gt;那么问题来了,什么是闭包.&lt;/p&gt;
&lt;p&gt;上面得概念需要知道，但是这里实现的功能却不一定需要闭包的概念，下面是更加直觉的写法。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiplier_gen&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;multiplier_gen&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jobbole.com/68256/"&gt;python程序员常见的10个错误&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Tue, 21 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-21:pythonde-chang-jian-cuo-wu.html</guid></item><item><title>About me</title><link>http://cha-messy.github.io/about-me.html</link><description>&lt;h2&gt;旅游&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;10天环台湾作为毕业旅行的课题&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一样的文化来源孕育出得完全不同的风貌。吃的也是很爽~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;下一站:进击的霓虹&lt;/h3&gt;
&lt;p&gt;10月的枫叶加上关东温泉&lt;/p&gt;
&lt;h2&gt;足球&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FC Barcelona:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;足球的传统标志就是身体对抗和大量的体力,传播营销做的最好的英超的比赛就是其中代表，个个筋肉块，快节奏、激烈的身体对抗,似乎足球理应如此。&lt;/p&gt;
&lt;p&gt;而真实的足球是这样子的,全尺寸的球场上面，大叔扶着膝盖在喘气, 球停到十米开外，传球传到的只有正确的思路。&lt;/p&gt;
&lt;h3&gt;什么是巴萨的足球&lt;/h3&gt;
&lt;p&gt;足球中的异类 @todo&lt;/p&gt;
&lt;h2&gt;烹饪(有99%是为了吃,恩)&lt;/h2&gt;
&lt;p&gt;Jamie Oliver: what I can at home is different from resturant, food gonna be tasty, gonna be simple. @naked-chef&lt;/p&gt;
&lt;p&gt;出于对食物、食材全方位的热爱，以及一个吃货在嫌麻烦方面有特殊的造诣，食材搭配的感觉有了，就不会错的太离谱,(当你在一个真正热爱食物的人面前，不经意间真的就会被感染,我却没有找到那种发至内心的热爱，多是吐槽啊,用得爽不爽啊、嫌麻烦啊为多,可能是我不懂程序员的爱吧,更有可能写程序多是逻辑的保证)。吃到一种意想不到的搭配的惊喜，能够真切感受到厨师的用心、想法(这种态度对应的当然是不菲)&lt;/p&gt;
&lt;h2&gt;电影&lt;/h2&gt;
&lt;h3&gt;Top:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;碧海蓝天&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加油站被袭事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搏击俱乐部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记忆碎片&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;最近:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;赤焰战场&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Mon, 20 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-20:about-me.html</guid><category>me</category></item><item><title>关于博客的定位</title><link>http://cha-messy.github.io/guan-yu-bo-ke-de-ding-wei.html</link><description>&lt;p&gt;学习本身不是问题,只是希望这个学习体系可以轻松套用到不同的领域,更加有效的积累，而不是堆沙似的积累,但是现在我的问题在于被这个框架牵扯浪费了过多精力，顾此失本。&lt;/p&gt;
&lt;h2&gt;现状&lt;/h2&gt;
&lt;p&gt;攒了一堆markdown，scrapbook,但是这个知识库的检索功能完全没有发挥，甚至于有的时候做过的东西由于当时没有好好整理(当时事可能比较急)，经常有需要重新看的情况。&lt;/p&gt;
&lt;h2&gt;工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scrapbook(Firefox的插件)来保存网页(不能及的地方有的纯网页实现的幻灯片、gitbook貌似都使不上力)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pelican 来生成静态的博客界面; 如果不是语言的门户之见,Jekll似乎是一个更好的选择，不用折腾(由于最近迁移了Mac,pelican连缺少markdown模块都没有啥直接明显的提示..),看着也很简洁美观.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dash 离线文档, snippet. (又是pelican不合作,make出来的文档不能被正确识别..)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;宗旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;强制梳理，保持简洁条理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持思考,以问题为导向来挖坑..无责任携带私货&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了写之外不应该成为负担,因为总结本身就很需要时间、精力,而通俗易懂的文章更需要长时间的打磨,所以外国技术文档的通俗易懂真是需要珍惜。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Mon, 20 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-20:guan-yu-bo-ke-de-ding-wei.html</guid><category>知识体系</category><category>工具</category></item><item><title>使用git的阶段性总结</title><link>http://cha-messy.github.io/shi-yong-gitde-jie-duan-xing-zong-jie.html</link><description>&lt;h2&gt;一般使用者&lt;/h2&gt;
&lt;h3&gt;在某分支中干活&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git add&lt;/code&gt; -&amp;gt; &lt;code&gt;git commit&lt;/code&gt; -&amp;gt; &lt;code&gt;git pull&lt;/code&gt; -&amp;gt; &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;分支间穿梭&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; 来方便的保留现场,然后跑到别的分支处理一些紧急事务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt; checkout到分支、commit、当前工作目录下某一文件的某一个历史状态，总之是个git内部存在的hash值就行.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;也许需要创建个本地分支来玩耍,然后删掉&lt;/p&gt;
&lt;h2&gt;A little bit more&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;产品发布的角度来看待git的开发流程,既gitflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是面对n个用户的定制的话..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;稍微知道点git的实现原理,至少能避免玩坏吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@todo&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Mon, 20 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-20:shi-yong-gitde-jie-duan-xing-zong-jie.html</guid><category>git</category></item><item><title>web.py源码分析</title><link>http://cha-messy.github.io/webpyyuan-ma-fen-xi.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Mon, 20 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-20:webpyyuan-ma-fen-xi.html</guid><category>web.py</category></item><item><title>初探python垃圾回收算法</title><link>http://cha-messy.github.io/chu-tan-pythonla-ji-hui-shou-suan-fa.html</link><description>&lt;p&gt;python的gc算法说到底就是就是引用计数,基础在于我们平常的赋值操作其实是将左边的变量名指向右边的真正的对象,一旦这个变量名不再指向这个对象，引用-1，直到没有变量名指向这个对象(既默认的强引用方式)，然后等待gc回收。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CycleReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obeject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;this object is &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isenabled&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gc module is running.&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;before oprates, there is &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; objects to collect.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;to collect objects are:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;garbage&lt;/span&gt;
&lt;span class="n"&gt;ob_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CycleReference&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ob_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CycleReference&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ob_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ob_b&lt;/span&gt;
&lt;span class="n"&gt;ob_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ob_a&lt;/span&gt;
&lt;span class="n"&gt;ob_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;ob_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="c"&gt;# 这里已经没有变量名指向创立的这两个CycleReference对象了，但是由于相互的引用,导致无法被回收。&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;After, there is &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; objects to collect.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;to collect objects are:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;garbage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;@todo &lt;code&gt;__del__&lt;/code&gt;函数的影响&lt;/p&gt;
&lt;h3&gt;Glossary&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gc.collect()&lt;/code&gt; 手动回收对象并返回数目&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gc.garbage&lt;/code&gt; 由于循环引用而产生的垃圾对象列表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gc.get_threshold()&lt;/code&gt; 阀值一般是(700，10，10) -&amp;gt; &lt;code&gt;gc.set_threshold()&lt;/code&gt; 设定阀值，各个数字的含义跟生成时间有关，对象的年代？暂时不明(todo) -&amp;gt; &lt;code&gt;gc.get_count()&lt;/code&gt; 获取当前collection内的数量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gc.enable()&lt;/code&gt;-&amp;gt;&lt;code&gt;gc.disable()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DEBUG模式暂时没碰上问题,下一步再说&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;问题导向&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;python的gc频率很高怎么测？ &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎么追踪问题？源码是c写的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么时候会遇到?怎么判断是gc的问题 @issues&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;不同语言gc算法比较&lt;/h2&gt;
&lt;p&gt;@todo&lt;/p&gt;
&lt;h3&gt;ruby&lt;/h3&gt;
&lt;p&gt;ruby采用的是？ 预先申请一堆内存，然后满了才触发回收。明显的不可知的回收压力爆发点？这么可怕的事怎么办？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-18:chu-tan-pythonla-ji-hui-shou-suan-fa.html</guid><category>gc</category></item><item><title>Emacs Cheat Sheet</title><link>http://cha-messy.github.io/emacs-cheat-sheet.html</link><description>&lt;p&gt;选取
&lt;code&gt;C-x h&lt;/code&gt; 全选选buffer
&lt;code&gt;C-c l&lt;/code&gt; 选取当前行(弱点,当前的行有缩进,-&amp;gt; &lt;code&gt;M-m&lt;/code&gt; &lt;code&gt;M-S--&lt;/code&gt; &lt;code&gt;C-e&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;矩形操作(rectangle&lt;/h3&gt;
&lt;p&gt;矩形定义: mark到cursor两点确定的矩形，是高亮部分的一个子集&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C-x r t&lt;/code&gt; 使用字符代替矩形内容,-&amp;gt;给一堆行加上注释(甚至是&lt;code&gt;M-m&lt;/code&gt;的地方！)、缩进
&lt;code&gt;C-x r k&lt;/code&gt; 去掉矩形内容-&amp;gt; 给一堆行去掉注释&lt;/p&gt;
&lt;h3&gt;移动光标&lt;/h3&gt;
&lt;p&gt;跳到下下个buffer&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C-x 1&lt;/code&gt; 保留当前buffer
&lt;code&gt;C-x 0&lt;/code&gt; 保留非当前的那个buffer(2个以上？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;M-!&lt;/code&gt; buffer所在的目录执行shell命令
&lt;code&gt;M-|&lt;/code&gt; 将所选择的区域以标准输出的方式传给shell命令，用来去重、排序之类的&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-18:emacs-cheat-sheet.html</guid><category>cheat-sheet</category></item><item><title>函数式编程 in python</title><link>http://cha-messy.github.io/han-shu-shi-bian-cheng-in-python.html</link><description>&lt;h2&gt;函数式语言的特点&lt;/h2&gt;
&lt;h2&gt;我为什么要学？&lt;/h2&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;howto&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-18:han-shu-shi-bian-cheng-in-python.html</guid><category>函数式</category></item><item><title>命令行路线图</title><link>http://cha-messy.github.io/ming-ling-xing-lu-xian-tu.html</link><description>&lt;h2&gt;在shell中生存&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linuxtoy.org/archives/bash-shortcuts.html"&gt;让你提升命令行效率的 Bash 快捷键 完整版&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bang备忘&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;!!：执行上一条命令
!blah：执行最近的以 blah 开头的命令，如 !ls
!blah:p：仅打印输出，而不执行
!&lt;span class="nv"&gt;$：&lt;/span&gt;上一条命令的最后一个参数，与 Alt + . 相同 &lt;span class="c"&gt;#快捷键足以&lt;/span&gt;
!&lt;span class="nv"&gt;$:&lt;/span&gt;p：打印输出 !&lt;span class="nv"&gt;$ &lt;/span&gt;的内容
!*：上一条命令的所有参数 &lt;span class="c"&gt;# mark&lt;/span&gt;
!*:p：打印输出 !* 的内容
^blah：删除上一条命令中的 blah &lt;span class="c"&gt;# mark&lt;/span&gt;
^blah^foo：将上一条命令中的 blah 替换为 foo
^blah^foo^：将上一条命令中所有的 blah 都替换为 foo &lt;span class="c"&gt;# not perfect&lt;/span&gt;

&lt;span class="c"&gt;#利用 :t 选取路径结尾&lt;/span&gt;
% wget http://nginx.org/download/nginx-1.4.7.tar.gz

% tar zxvf !&lt;span class="nv"&gt;$:&lt;/span&gt;t
tar zxvf nginx-1.4.7.tar.gz
&lt;span class="c"&gt;#相当于 basename&lt;/span&gt;

&lt;span class="c"&gt;#利用 :h 选取路径开头&lt;/span&gt;
% ls /usr/share/fonts/truetype

% &lt;span class="nb"&gt;cd&lt;/span&gt; !&lt;span class="nv"&gt;$:&lt;/span&gt;h
&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/share/fonts
&lt;span class="c"&gt;#相当于 dirname&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://talk.linuxtoy.org/using-cli/#1"&gt;Better&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;About Mac&lt;/h2&gt;
&lt;p&gt;route没了, free没了，netstat变了&lt;/p&gt;
&lt;h3&gt;@todo&lt;/h3&gt;
&lt;p&gt;Mac里面怎么愉快的玩耍？&lt;a href="http://cb.vu/unixtoolbox.xhtml"&gt;Unix Tool&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;系统性能监控&lt;/h2&gt;
&lt;h2&gt;Bash的使用进阶&lt;/h2&gt;
&lt;h3&gt;@todo&lt;/h3&gt;
&lt;p&gt;主要参考书籍？达到什么目标？&lt;/p&gt;
&lt;h2&gt;Chaos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://linuxtoy.org/archives/man-tricks.html"&gt;man使用技巧两则&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;!&lt;/code&gt; 来直接实验命令，正确体位:&lt;code&gt;! command&lt;/code&gt;，直接输入&lt;code&gt;!&lt;/code&gt;回车会直接跳到man目录下并且-下没有之前的目录..(另外man中得命令是没有自动补全的..)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;m&lt;/code&gt; -&amp;gt; bookmark -&amp;gt; &lt;code&gt;'&lt;/code&gt; -&amp;gt; bookmark 一旦退出，书签就没了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-18:ming-ling-xing-lu-xian-tu.html</guid><category>shell</category></item><item><title>Unicode in python</title><link>http://cha-messy.github.io/unicode-in-python.html</link><description>&lt;ul&gt;
&lt;li&gt;不能重现的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;idle,ipython 中都有 c = u'中文'的bug&lt;/p&gt;
&lt;p&gt;但是在文件当中却能够正常运行&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;see howto&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-18:unicode-in-python.html</guid><category>unicode</category></item><item><title>vi的生存手册</title><link>http://cha-messy.github.io/vide-sheng-cun-shou-ce.html</link><description>&lt;h3&gt;光标的移动&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt;-&amp;gt;&lt;code&gt;$&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gg&lt;/code&gt;-&amp;gt;&lt;code&gt;G&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt; -&amp;gt; &lt;code&gt;L&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;光标定位&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;3fa&lt;/code&gt; 前进到第三个a&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n &amp;lt;Enter&amp;gt;&lt;/code&gt; 下移n行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:n&lt;/code&gt; 移动到n行&lt;/p&gt;
&lt;h3&gt;翻页&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl-u&lt;/code&gt; -&amp;gt; &lt;code&gt;Ctrl-d&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl-b&lt;/code&gt; -&amp;gt; &lt;code&gt;Ctrl-f&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;查询&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; -&amp;gt; &lt;code&gt;N&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;退出&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ZZ&lt;/code&gt;(save &amp;amp;&amp;amp; quit) -&amp;gt; &lt;code&gt;ZQ&lt;/code&gt;(just quit)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;undo &lt;code&gt;u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;进阶功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;语法高亮&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://coolshell.cn/articles/5426.html"&gt;vim简明练级攻略&lt;/a&gt; &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-18:vide-sheng-cun-shou-ce.html</guid><category>vi</category></item><item><title>打造Mac效率工作环境</title><link>http://cha-messy.github.io/da-zao-macxiao-lu-gong-zuo-huan-jing.html</link><description>&lt;h2&gt;番茄&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;25/5模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工作25分钟，然后是5分钟休息&lt;/p&gt;
&lt;h3&gt;最终解决方案&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Automator来跑shell命令、发送提醒消息+Alfred的快捷键绑定App&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只是用Alfred来弄,一种情况是会在iterm2中新开tab,二是terminal-notifier不能正常产生消息提示。&lt;/p&gt;
&lt;p&gt;Automator的好处还在于一般在屏幕上方的工具栏有一个转动的齿轮，方便你意识到自己是不是还在工作流中,另外点击齿轮还可以方便你取消。&lt;/p&gt;
&lt;h3&gt;A little bit more&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;say -v&lt;/code&gt; 可以提供一些奇奇怪怪的声音,至于说玩的好坏，只在乎你脑洞的大小;)
&lt;a href="http://stackoverflow.com/questions/3127977/how-to-make-the-hardware-beep-sound-in-mac-os-x-10-6"&gt;来源于这&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;Better at Mac&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果Automator可以开启do not disturb模式搭配..(如果可以有快捷的方式一下把消息中心的所有消息一下清空~)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;任务管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;@todo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Org-mode + RTM + Google Calendar&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Fri, 17 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-17:da-zao-macxiao-lu-gong-zuo-huan-jing.html</guid><category>番茄</category><category>GTD</category></item><item><title>工作环境迁移到MBP</title><link>http://cha-messy.github.io/gong-zuo-huan-jing-qian-yi-dao-mbp.html</link><description>&lt;h2&gt;工具迁移&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;包管理 apt -&amp;gt; brew&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;openbox 定义快捷键来启动软件之类的工作 -&amp;gt; Alfred 工作流，快捷键&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感觉Gnome的快捷键和苹果的设置类似，谁抄谁的我就不知道了。Alfred的工作流,太适合一个蛋疼的人去追求什么极致的效率的了...&lt;/p&gt;
&lt;h3&gt;终端&lt;/h3&gt;
&lt;p&gt;urxvt -&amp;gt; iterm2&lt;/p&gt;
&lt;p&gt;大部分特性由oh-my-zsh，tmux来提供,所以终端不需要怎么折腾,但是最重要的还是要把默认把option改成Alt键，单单为了能使&lt;code&gt;Alt+,&lt;/code&gt;来插入上条命令的参数就值得稍微配置一下&lt;/p&gt;
&lt;h3&gt;tmux&lt;/h3&gt;
&lt;p&gt;无缝迁移&lt;/p&gt;
&lt;h3&gt;Emacs&lt;/h3&gt;
&lt;p&gt;使用的版本来源于:http://emacsformacosx.com/&lt;/p&gt;
&lt;p&gt;关于全屏的个人问题:我就是不想要全屏的时候有tool-bar-mode，但是没有的时候窗口下面总是有更无语的黑条,探索EmacsWiki实验未果,只能把tool-bar保留了.&lt;/p&gt;
&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Command+num&lt;/code&gt;可以指定tab页了,我是从远古版本来的泪奔人..&lt;/p&gt;
&lt;p&gt;书签的同步就因为是从远古时代来的原因，firefox的同步已经不是以前的验证码的形式了，并且不兼容之前的账号..所以只能手工导入了，位置有点小偏差.问题不大.&lt;/p&gt;
&lt;h3&gt;新增效率工具&lt;/h3&gt;
&lt;p&gt;Dash 离线文档,code snippet&lt;/p&gt;
&lt;h2&gt;遗留问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;emacs24模块管理 不是必须的,以前自己组织的方式也没有问题,他也需要解决启动加载慢的问题,但是由于我习惯性的不关Emacs，所以暂时搁置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flymake 使用pyflakes来检查python文件的功能失效 @todo&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看报错的信息应该是pyflakes不能新建一个依赖的检查文件，回头去看看是不是平台的问题,这个问题比较蛋疼的地方是读取python文件的时候，直接用键盘回车弹出信息框的确定之后Emacs就假死了,只能杀了重来..&lt;/p&gt;
&lt;h3&gt;快捷键&lt;/h3&gt;
&lt;p&gt;多了一个Command键,需要适应吧, 虽然还是emacs流的快捷键，大部分都是Command-&amp;gt;Ctrl，但是Command-a被, 但是现在有个好处是所有的地方都可以有&lt;code&gt;Ctrl-a&lt;/code&gt;,&lt;code&gt;Ctrl-b&lt;/code&gt;这几个方便的快捷键，但是undo的快捷键没有.. 不像在linux的图形程序，常见场景比如浏览器这些浏览器里面快捷键都是有良心的js来提供的&lt;/p&gt;
&lt;h3&gt;命令行&lt;/h3&gt;
&lt;p&gt;coreutils,findutils两个包安装的安装为了解决下面一些命令行命令的不适应..但是&lt;code&gt;route&lt;/code&gt; &lt;code&gt;netstat&lt;/code&gt;之类的怎么办..暂时将命令路径加入PATH中，现在使用GNU的命令都是g打头，下一步确定了解决方法再说吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;locate没有--regex选项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最简单的查一个文件夹的命令也搞不了(确实不想从一坨输出中去找才会这么纠结吧..) &lt;code&gt;locate --regex "/[sS]crap[bB]ook$"&lt;/code&gt;， 安装了findutils包，但是提供的gupdatedb命令不能产生正确的索引结果,在创建的文件夹里面只生成了10B的结果文件,暂时解决未果&lt;/p&gt;
&lt;h3&gt;Better 番茄&lt;/h3&gt;
&lt;p&gt;进入番茄的时候开启do not disturb模式。&lt;/p&gt;
&lt;p&gt;打造完美的工作流~，又是个坑~ 待下文&lt;/p&gt;
&lt;h2&gt;Others&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;为什么不使用mac的配置备份&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚假的信任放心感, 这么多的配置涉及的功能肯定很多，太容易被苹果一句话的功能架构调整给影响，当你信任的配置备份软件不能正常工作的时候，然后造成一堆无从下手得问题时,只能期待这个软件的公司良心爆发.. 还是俗称的驯服的过程来的比较可靠(就是到处乱点),既熟悉了系统,又完成了个性化的设置,一不小心完成了不可再现的功能,那必将又是一段流传在江湖上de佳话~&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.yangzhiping.com/tech/mac-dev.html"&gt;Mac开发者2013年新机设置参考&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.zhihu.com/question/20873070/answer/20139836"&gt;程序员如何优雅地使用 Mac？ - 知乎&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Mon, 13 Oct 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-10-13:gong-zuo-huan-jing-qian-yi-dao-mbp.html</guid><category>工具</category></item><item><title>python单元测试的大致框架</title><link>http://cha-messy.github.io/pythondan-yuan-ce-shi-de-da-zhi-kuang-jia.html</link><description>&lt;h2&gt;工具&lt;/h2&gt;
&lt;p&gt;nose, coverage, mock&lt;/p&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是否需要nose的断言方言？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我不想用的原因主要是迁移方便,assert直接断言一样好使&lt;/p&gt;
&lt;p&gt;@todo&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Sun, 28 Sep 2014 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2014-09-28:pythondan-yuan-ce-shi-de-da-zhi-kuang-jia.html</guid><category>unittest</category></item><item><title>tmux 使用日志</title><link>http://cha-messy.github.io/tmux-shi-yong-ri-zhi.html</link><description>&lt;blockquote&gt;
&lt;p&gt;tmux 是代替screen的解决方案. 忽略终端类型，跨平台的统一shell工作环境的操作模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Cheat Sheet&lt;/h2&gt;
&lt;p&gt;具体的配置参见文章最下方的引用处.&lt;/p&gt;
&lt;h3&gt;copy mode&lt;/h3&gt;
&lt;p&gt;@&lt;code&gt;.tmux.conf&lt;/code&gt; line 28-32&lt;/p&gt;
&lt;p&gt;@手不需要离开键盘,终端进程内通用粘贴寄存器(就是终端内打开的vi里面也能舒爽的粘贴,下一步可以试试选取之后能不能用Command+c将内容放入系统的粘贴寄存器内),不会造成pane之间的混乱串行.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prefix Esc&lt;/code&gt; 进入copy mode --&amp;gt; v (set mark) --&amp;gt; y (copy|yank); quit copy mode --&amp;gt; &lt;code&gt;Prefix C-p&lt;/code&gt; (paste) &lt;/p&gt;
&lt;p&gt;@vi的使用流 v(visual mode) --&amp;gt; y (yank) --&amp;gt; p (paste)&lt;/p&gt;
&lt;h3&gt;帮助&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Prefix ?&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;调整布局&lt;/h3&gt;
&lt;p&gt;增删改切 pane, window, session&lt;/p&gt;
&lt;h4&gt;pane&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;C-d&lt;/code&gt; kill pane&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prefix |&lt;/code&gt; split window her&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prefix -&lt;/code&gt; split window ver&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prefix C-u&lt;/code&gt; swap pane&lt;/p&gt;
&lt;h4&gt;window&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Prefix c&lt;/code&gt; create window&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prefix ,&lt;/code&gt; rename&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prefix &amp;amp;&lt;/code&gt; delete window&lt;/p&gt;
&lt;h4&gt;session&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Prefix n&lt;/code&gt; &lt;code&gt;Prefix p&lt;/code&gt; 从此切window不需要去看数字了..如果不远,首尾不是问题~YEAH!!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prefix s&lt;/code&gt; switch session&lt;/p&gt;
&lt;h3&gt;调整配置&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Prefix r&lt;/code&gt; reload ~/.tmux.conf&lt;/p&gt;
&lt;h3&gt;常见问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;误操作,退出了tmux.(一般是&lt;code&gt;Prefix d&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先确定session还在,&lt;code&gt;tmux list-session&lt;/code&gt;，如果还在,&lt;code&gt;tmux attach-session -t name&lt;/code&gt;可以很轻松的还原,take easy..如果没了,只能期待这个环境你做过了tmux的初始化脚本了..&lt;/p&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;远程演示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tmuxp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个问题是tmux会在运行命令或者切换目录之后自动的修改pane的名字..有办法固定名字么？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;预配置布局&lt;/h3&gt;
&lt;p&gt;每次打开tmux都去新建几个窗口和面板,难道不是重复的劳动吗？&lt;/p&gt;
&lt;p&gt;一些tmux的命令：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$tmux&lt;/span&gt; new-session new    -- Create a new session
-d                   -- attach the new session the current terminal
-n                   -- name the initial window
-s                   -- name the session
-t                   -- specify target session

&lt;span class="nv"&gt;$tmux&lt;/span&gt; splitw -
-d            -- &lt;span class="k"&gt;do &lt;/span&gt;not make the new window become the active one
-h            -- split horizontally
-l            -- define new pane&lt;span class="s1"&gt;&amp;#39;s size&lt;/span&gt;
&lt;span class="s1"&gt;-p            -- define new pane&amp;#39;&lt;/span&gt;s size in percent
-t            -- choose target pane
-v            -- split vertically

&lt;span class="nv"&gt;$tmux&lt;/span&gt; run &lt;span class="c"&gt;#运行的载体和send-keys一样？只是不用再传入一个&amp;quot;C-m&amp;quot;?&lt;/span&gt;
run-shell  run  -- Execute a &lt;span class="nb"&gt;command &lt;/span&gt;without creating a new window

&lt;span class="nv"&gt;$tmux&lt;/span&gt; new -d -n zsh -s &lt;span class="nv"&gt;$session&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zsh&amp;quot;&lt;/span&gt; 
&lt;span class="c"&gt;#最后这个&amp;quot;zsh&amp;quot;能够启动zsh，但是不能中间有;的命令？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Glossary&lt;/h2&gt;
&lt;h3&gt;Session,Window,Pane&lt;/h3&gt;
&lt;p&gt;tmux使用C/S模型构建，主要包括以下单元模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;server服务器。输入tmux命令时就开启了一个服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;session会话。一个服务器可以包含多个会话&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;window窗口。一个会话可以包含多个窗口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pane面板。一个窗口可以包含多个面板。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;server &amp;gt; session &amp;gt; window &amp;gt; pane&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/xuxiaodong/tmuxen/blob/master/_tmux.conf"&gt;配置参考地址&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.longwin.com.tw/2011/04/tmux-learn-screen-config-2011/"&gt;Tmux 教學 + Screen 到 Tmux 的無痛轉換&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.lampbo.org/others/opensource/tmux-multi-terminal-manager-usage-detail.html"&gt;多终端管理器tmux使用详解&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jack-boy.iteye.com/blog/1586908"&gt;tmux基本使用 &lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Mon, 22 Apr 2013 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2013-04-22:tmux-shi-yong-ri-zhi.html</guid><category>tmux</category></item><item><title>zsh 使用小结</title><link>http://cha-messy.github.io/zsh-shi-yong-xiao-jie.html</link><description>&lt;h2&gt;使用小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首字母缩写感觉比较鸡肋.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还得去花时间去想首字母，更多时候我连目录结构都忘了,这时候还是多按几个tab键吧.ps:如果需要在项目中那种复杂、使用频率又高的场景中，定义几个alias来快速定位才是简单实用的正途..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更强大的参数补全.还是不能产生信任.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较常见的不可信任的场景,git的那些子命令的补全的时候经常不能按希望进行，而且还不知道从哪曝出一堆错，老老实实的记住常用的选项，不常用的功能也能在大脑里面形成一张功能对应查询词的表才是更可靠的方法吧。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;一向的意见:安装见官方,野路子无法比拟的覆盖平台的广度,常见问题的实用性..如果这个工具不是的话..那就准备好折腾吧.神爱世人..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/zsh-users/zsh"&gt;zsh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh my zsh&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;事件相关人事物&lt;/h3&gt;
&lt;p&gt;命令: &lt;code&gt;chsh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;文件: &lt;code&gt;/etc/passwd&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;下一步&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview"&gt;oh-my-zsh 那些插件们&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;update&lt;/h2&gt;
&lt;p&gt;@Tue Oct 14 2014&lt;/p&gt;
&lt;p&gt;经历了Debian-&amp;gt;Mac的迁移和bash漏洞的洗礼，oh-my-zsh的使用更加符合我对他的定位，就是一个现在我能找到功能还处在不断发展中(至少是有不少人讨论)，bash的替代品。&lt;code&gt;不折腾(尽量..)，有新料(不能否认的是，有人玩的话，查问题会比较容易)，核心功能足够用，对于一个工具使用者，这些就够了.&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.longwin.com.tw/2011/10/macosx-shell-zsh-2011/"&gt;Tsung's blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.kafeitu.me/shell/2012/03/25/oh-my-zsh.html"&gt;我最喜爱的工具oh my zsh&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.gentoo.org/doc/zh_cn/zsh.xml"&gt;Gentoo linux文档&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://lostjs.com/2012/09/27/zsh/"&gt;使用 Zsh 的九个理由&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://linuxtoy.org/archives/zsh.html"&gt;终极Shell——Zsh&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.acm.uiuc.edu/workshops/zsh/toc.html"&gt;Zsh Workshop: Table of Contents&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cyberciti.biz/faq/howto-set-bash-as-your-default-shell/"&gt;Setting bash as default shell&lt;/a&gt; (设置默认shell)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">coory</dc:creator><pubDate>Mon, 22 Apr 2013 00:00:00 +0800</pubDate><guid>tag:cha-messy.github.io,2013-04-22:zsh-shi-yong-xiao-jie.html</guid><category>zsh</category></item></channel></rss>